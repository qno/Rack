# https://docs.microsoft.com/de-de/azure/devops/pipelines/agents/hosted?view=azure-devops#software
trigger:
- master

variables:
  python-version: "3.7"
  conan-pkg: "conan"
  cpt-pkg:  "conan_package_tools"
  bpt-pkg: "bincrafters_package_tools"
  linux-deps: "python3-setuptools python3-pip build-essential automake autoconf libtool cmake gcc g++ clang ninja-build git p7zip-full"
  vcvracksdk-version: "latest"
  vcvracksdk-conan-channel: "testing"
  vcvracksdk-conan-upload-remote: "qno"
  vcvrack-sdk-conan-upload-username: "qno"
  vcvracksdk-conan-remote: "$(vcvracksdk-conan-upload-remote) https://api.bintray.com/conan/qno/conan-public"
  vcvrack-sdk-conan-upload-apikey: "$(BINTRAY_API_KEY)" # set by azure job

  conan-add-remotes: |
    conan user
    conan remote add $(vcvracksdk-conan-remote) --insert
    conan remote add conan-community https://api.bintray.com/conan/conan-community/conan
    conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan

  conan-upload-dependencies: |
    conan upload OUIBlendishVCVRack/* --all --confirm --remote $(vcvracksdk-conan-upload-remote)
    conan upload OSDialog/* --all --confirm --remote $(vcvracksdk-conan-upload-remote)
    conan upload NanoSVG/* --all --confirm --remote $(vcvracksdk-conan-upload-remote)
    conan upload stb/* --all --confirm --remote $(vcvracksdk-conan-upload-remote)
    conan upload SpeexDSP/* --confirm --all --remote $(vcvracksdk-conan-upload-remote)
    conan upload RtAudio/* --confirm --all --remote $(vcvracksdk-conan-upload-remote)
    conan upload RtMidi/* --confirm --all --remote $(vcvracksdk-conan-upload-remote)
    conan upload Pffft/* --confirm --all --remote $(vcvracksdk-conan-upload-remote)
    conan upload jansson/* --confirm --all --remote $(vcvracksdk-conan-upload-remote)
    conan upload libcurl/* --confirm --all --remote $(vcvracksdk-conan-upload-remote)
    conan upload libzip/* --confirm --all --remote $(vcvracksdk-conan-upload-remote)
    conan upload glfw/* --confirm --all --remote $(vcvracksdk-conan-upload-remote)
    conan upload OpenSSL/* --confirm --all --remote $(vcvracksdk-conan-upload-remote)

  # Xcode Version overview: https://gist.github.com/yamaya/2924292
  # available versions: https://github.com/Microsoft/azure-pipelines-image-generation/blob/master/images/macos/macos-10.14-Readme.md
  XCODE_VERSION: 10.2

stages:
- stage: build
  displayName: Build Rack
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/container-phases?view=azure-devops&tabs=yaml
  jobs:
    # maybe also try CentOS and Arch builds?
    - job: LinuxGCC
      pool:
        vmImage: 'ubuntu-16.04'
      container:
        image: ubuntu:disco
        options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
      steps:
        - script: |
            /tmp/docker exec -t -u 0 ci-container \
            sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
          displayName: add sudo to container #https://github.com/Microsoft/azure-pipelines-agent/issues/2043
        - script: |
            export PATH="$PATH:$HOME/.local/bin"
            sudo apt install -y $(linux-deps)
            pip3 install --user $(conan-pkg)
            pip3 install --user $(cpt-pkg) $(bpt-pkg)
            $(conan-add-remotes)
          displayName: setup dependencies
#        - script: |
#            export PATH="$PATH:$HOME/.local/bin"
#            conan create . vcvrack/$(vcvracksdk-conan-channel) -s compiler.libcxx=libstdc++11 --build=missing
#            conan user -p $(vcvrack-sdk-conan-upload-apikey) --remote $(vcvracksdk-conan-upload-remote) $(vcvrack-sdk-conan-upload-username)
#            conan upload VCVRackSDK/$(vcvracksdk-version)@vcvrack/$(vcvracksdk-conan-channel) --all --remote=$(vcvracksdk-conan-upload-remote)
#          displayName: build VCVRackSDK
#        - script: |
#            export PATH="$PATH:$HOME/.local/bin"
#            $(conan-upload-dependencies)
#          displayName: upload conan packages from local cache
        - script: |
            export PATH="$PATH:$HOME/.local/bin"
            pushd .
            mkdir build && cd build
            conan install .. -s compiler.libcxx=libstdc++11 -s build_type=Release --build=missing
            cmake -DCMAKE_BUILD_TYPE=Release -G Ninja ..
            ninja -v
            mkdir Rack
            cp -r bin/* Rack
            7z a -tzip -mx=9 Rack-extra-lin.zip Rack
          displayName: build VCVRack
        - task: PublishPipelineArtifact@1
          inputs:
            path: $(System.DefaultWorkingDirectory)/build
            artifact: Rack-Linux
    - job: LinuxClang
      pool:
        vmImage: 'ubuntu-16.04'
      container:
        image: ubuntu:disco
        options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
      steps:
        - script: |
            /tmp/docker exec -t -u 0 ci-container \
            sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
          displayName: add sudo to container #https://github.com/Microsoft/azure-pipelines-agent/issues/2043
        - script: |
            export PATH="$PATH:$HOME/.local/bin"
            sudo apt install -y $(linux-deps)
            pip3 install --user $(conan-pkg)
            pip3 install --user $(cpt-pkg) $(bpt-pkg)
            $(conan-add-remotes)
          displayName: setup dependencies
#        - script: |
#            export PATH="$PATH:$HOME/.local/bin"
#            export CC=clang
#            export CXX=clang++
#            conan create . vcvrack/$(vcvracksdk-conan-channel) --profile .ci/conan_profile_linux_clang8 --build=missing
#            conan user -p $(vcvrack-sdk-conan-upload-apikey) --remote $(vcvracksdk-conan-upload-remote) $(vcvrack-sdk-conan-upload-username)
#            conan upload VCVRackSDK/$(vcvracksdk-version)@vcvrack/$(vcvracksdk-conan-channel) --all --remote=$(vcvracksdk-conan-upload-remote)
#          displayName: build VCVRackSDK
#        - script: |
#            export PATH="$PATH:$HOME/.local/bin"
#            $(conan-upload-dependencies)
#          displayName: upload conan packages from local cache
        - script: |
            export PATH="$PATH:$HOME/.local/bin"
            export CC=clang
            export CXX=clang++
            pushd .
            mkdir build && cd build
            conan install .. -s build_type=Release --profile ../.ci/conan_profile_linux_clang8 --build=missing
            cmake -DCMAKE_BUILD_TYPE=Release -G Ninja ..
            ninja -v
            mkdir Rack
            cp -r bin/* Rack
            7z a -tzip -mx=9 Rack-extra-lin-clang.zip Rack
          displayName: build VCVRack
        - task: PublishPipelineArtifact@1
          inputs:
            path: $(System.DefaultWorkingDirectory)/build
            artifact: Rack-Linux-Clang
    - job: MacOS1014
      pool:
        vmImage: macOS-10.14
      steps:
        - task: UsePythonVersion@0
          inputs:
           versionSpec: $(python-version)
        - script: |
            /bin/bash -c "sudo xcode-select -s /Applications/Xcode_$(XCODE_VERSION).app/Contents/Developer"
            export PATH="$HOME/.local/bin:$PATH"
            pip install --upgrade pip
            brew update || brew update
            brew install autoconf automake libtool pkg-config p7zip
            brew install cmake || true
            pip install --upgrade $(conan-pkg)
            pip install $(cpt-pkg) $(bpt-pkg)
            $(conan-add-remotes)
          displayName: setup dependencies
#        - script: |
#            export PATH="$HOME/.local/bin:$PATH"
#            conan create . vcvrack/$(vcvracksdk-conan-channel) --build=missing
#            conan user -p $(vcvrack-sdk-conan-upload-apikey) --remote $(vcvracksdk-conan-upload-remote) $(vcvrack-sdk-conan-upload-username)
#            conan upload VCVRackSDK/$(vcvracksdk-version)@vcvrack/$(vcvracksdk-conan-channel) --all --remote=$(vcvracksdk-conan-upload-remote)
#          displayName: build VCVRackSDK
#        - script: |
#            export PATH="$HOME/.local/bin:$PATH"
#            $(conan-upload-dependencies)
#          displayName: upload conan packages from local cache
        - script: |
            pushd .
            mkdir build && cd build
            conan install .. -s build_type=Release --build=missing
            cmake -DCMAKE_BUILD_TYPE=Release ..
            VERBOSE=1 make -j
            mkdir Rack
            cp -r bin/* Rack
            7z a -tzip -mx=9 Rack-extra-mac.zip Rack
          displayName: build VCVRack
        - task: PublishPipelineArtifact@1
          inputs:
            path: $(System.DefaultWorkingDirectory)/build
            artifact: Rack-Mac
    - job: MinGW
      pool:
        vmImage: vs2017-win2016
      steps:
        - task: UsePythonVersion@0
          inputs:
           versionSpec: $(python-version)
        - script: |
            python -m pip install --upgrade pip
            python -m pip install $(conan-pkg)
            python -m pip install $(cpt-pkg) $(bpt-pkg)
            $(conan-add-remotes)
          displayName: setup dependencies
#        - script: |
#            conan create . vcvrack/$(vcvracksdk-conan-channel) --profile .ci/conan_profile_mingw_gcc8 --build=missing
#            conan user -p $(vcvrack-sdk-conan-upload-apikey) --remote $(vcvracksdk-conan-upload-remote) $(vcvrack-sdk-conan-upload-username)
#            conan upload VCVRackSDK/$(vcvracksdk-version)@vcvrack/$(vcvracksdk-conan-channel) --force --all --remote=$(vcvracksdk-conan-upload-remote)
#          displayName: build VCVRackSDK
#        - script: |
#            $(conan-upload-dependencies)
#          displayName: upload conan packages from local cache
        - script: |
            mkdir build
            cd build
            conan install .. -s build_type=Release --profile ../.ci/conan_profile_mingw_gcc8 --build=missing
            call .\activate_run.bat
            REM # see https://stackoverflow.com/a/45104058 - MinGW sh.exe must NOT be in your path
            cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_SH=CMAKE_SH-NOTFOUND ..
            cmake --build .
            call .\deactivate_run.bat
            mkdir Rack
            xcopy bin Rack /E /Y
            7z a -tzip -mx=9 Rack-extra-win.zip Rack
          displayName: build VCVRack
        - task: PublishPipelineArtifact@1
          inputs:
            path: $(System.DefaultWorkingDirectory)/build
            artifact: Rack-Win
#    - job: VisualStudio
#      pool:
#        vmImage: vs2017-win2016
#      steps:
#        - task: UsePythonVersion@0
#          inputs:
#           versionSpec: $(python-version)
#        - script: |
#            python -m pip install --upgrade pip
#            python -m pip install $(conan-pkg)
#            python -m pip install $(cpt-pkg) $(bpt-pkg)
#            $(conan-add-remotes)
#            mkdir build
#            cd build
#            conan install .. -s build_type=Release
#            cmake -G "Visual Studio 15 Win64" -DCMAKE_BUILD_TYPE=Release ..
#            cmake --build .
#          displayName: build VCVRack
- stage: publish
  displayName: Publish Plugin
  dependsOn: build
  jobs:
    - job: PublishArtifacts
      pool:
        vmImage: 'ubuntu-16.04'
      steps:
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: Rack-Linux
            patterns: "**/*.zip"
            targetPath: $(Build.ArtifactStagingDirectory)
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: Rack-Linux-Clang
            patterns: "**/*.zip"
            targetPath: $(Build.ArtifactStagingDirectory)
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: Rack-Mac
            patterns: "**/*.zip"
            targetPath: $(Build.ArtifactStagingDirectory)
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: Rack-Win
            patterns: "**/*.zip"
            targetPath: $(Build.ArtifactStagingDirectory)
        - script: |
            ls -la $(Build.ArtifactStagingDirectory)
            wget https://github.com/tcnksm/ghr/releases/download/v0.12.1/ghr_v0.12.1_linux_amd64.tar.gz
            tar xf *gz --strip-components=1
            ./ghr -u qno -r VCVRack-Release-Demo -t $(GITHUB_API_TOKEN) -prerelease -replace Nightly $(Build.ArtifactStagingDirectory)
          displayName: upload artifacts to Github Release
